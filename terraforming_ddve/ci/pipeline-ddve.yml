s3_env: &s3_env
  access_key_id: ((((foundation))/s3_access_key_id))
  endpoint:  ((((foundation))/s3_endpoint))
  region_name: ((((foundation))/s3_region_name))
  secret_access_key: ((((foundation))/s3_secret_access_key))
tf_backend_env: &tf_backend
  TF_BACKEND_CONFIG_access_key: ((((foundation))/s3_access_key_id))
  TF_BACKEND_CONFIG_endpoint:  ((((foundation))/s3_endpoint))
  TF_BACKEND_CONFIG_region: ((((foundation))/s3_region_name))
  TF_BACKEND_CONFIG_secret_key: ((((foundation))/s3_secret_access_key))
  TF_BACKEND_CONFIG_key: "terraforming-dps/terraform.tfstate"
#  TF_BACKEND_CONFIG_skip_requesting_account_id: true
  TF_BACKEND_CONFIG_skip_credentials_validation: true
#  TF_BACKEND_CONFIG_skip_get_ec2_platforms: true
  TF_BACKEND_CONFIG_skip_metadata_api_check: true
  TF_BACKEND_CONFIG_skip_region_validation: true
  TF_BACKEND_CONFIG_force_path_style: true
tf_vars: &tf_vars
  TF_DIR_PATH: terraforming_ddve
  TF_VAR_environment: public
  TF_VAR_subscription_id: ((azure_dell_subscription_id))
  TF_VAR_tenant_id: ((azure_dell_tenant_id))
  TF_VAR_client_id: ((azure_dell_client_id))
  TF_VAR_client_secret: ((azure_dell_client_secret))
resources:
  - name: tfvars
    icon: cloud-download
    type: s3
    source:
      <<: *s3_env
      bucket: terraform
      regexp: terraforming-dps/terraform_(.*).auto.tfvars

  - name: concourse-terraform
    type: git
    source:
      uri: https://github.com/Snapkitchen/concourse-terraform
  - name: concourse-terraform-image
    type: docker-image
    source:
      repository: snapkitchen/concourse-terraform
      tag: 0.12.21
  - name: terraforming-dps
    tags: ((tags))
    icon: git
    type: git
    check_every: 10m  
    source:  
      uri: https://github.com/bottkars/terraforming-dps.git
      branch: master
  - name: terraform-destroy-plan
    icon: cloud-download
    type: s3
    source:
      <<: *s3_env
      bucket: terraform
      regexp: destroy/terraform-(\d{10}).tar.gz 
  - name: terraform-apply-plan
    icon: cloud-download
    type: s3
    source:
      <<: *s3_env
      bucket: terraform
      regexp: apply/terraform-(\d{10}).tar.gz       
jobs:
  # a job using a terraform task with the terraform image
  - name: auto-plan
    plan: 
    - get: tfvars
    - get: concourse-terraform
    - get: concourse-terraform-image
    - get: terraforming-dps
    - task: terraform-plan
      image: concourse-terraform-image
      file: concourse-terraform/tasks/plan.yaml
      input_mapping:
        terraform-source-dir: terraforming-dps
        aux-input-1: tfvars
      params:
        TF_AUX_INPUT_PATH_1: aux-input-1
        <<: *tf_backend
        <<: *tf_vars


  # a job using a terraform task with the terraform image
  - name: plan
    plan: 
    - get: tfvars
    - get: concourse-terraform
    - get: concourse-terraform-image
    - get: terraforming-dps
    - task: terraform-create-plan
      image: concourse-terraform-image
      file: concourse-terraform/tasks/create-plan.yaml
      input_mapping:
        terraform-source-dir: terraforming-dps
        aux-input-1: tfvars
      params:
        TF_AUX_INPUT_PATH_1: aux-input-1
        <<: *tf_backend
        <<: *tf_vars     
    - put: terraform-apply-plan
      params:
        file: plan-output-archive/terraform-*.tar.gz

  - name: review
    serial_groups: [terraform]
    plan:
    - in_parallel:
      - get: concourse-terraform
        passed: [plan]
      - get: concourse-terraform-image
        passed: [plan]
      - get: terraform-apply-plan
        passed: [plan]
    - task: show-plan
      image: concourse-terraform-image
      file: concourse-terraform/tasks/show-plan.yaml
      input_mapping:
        plan-output-archive: terraform-apply-plan
      params:
          TF_AUX_INPUT_PATH_1: aux-input-1
          <<: *tf_backend
          <<: *tf_vars     

  - name: apply
    plan: 
    - get: concourse-terraform
    - get: concourse-terraform-image
      passed:
      - plan
    - get: terraform-apply-plan
      passed: 
        - plan
    - task: apply-plan
      image: concourse-terraform-image
      file: concourse-terraform/tasks/apply-plan.yaml
      input_mapping:
        plan-output-archive: terraform-apply-plan    
      params:
          TF_AUX_INPUT_PATH_1: aux-input-1
          <<: *tf_backend
          <<: *tf_vars     



  - name: plan-destroy
    plan: 
    - get: tfvars
    - get: concourse-terraform
    - get: concourse-terraform-image
    - get: terraforming-dps
    - task: terraform-destroy
      image: concourse-terraform-image
      file: concourse-terraform/tasks/create-plan.yaml
      input_mapping:
        terraform-source-dir: terraforming-dps
        aux-input-1: tfvars
      params:
        DESTROY: true
        TF_AUX_INPUT_PATH_1: aux-input-1
        <<: *tf_backend
        <<: *tf_vars 
    - put: terraform-destroy-plan
      params:
        file: plan-output-archive/terraform-*.tar.gz

  - name: destroy
    plan: 
    - get: terraform-destroy-plan
      passed:
      - plan-destroy    
    - get: concourse-terraform
    - get: concourse-terraform-image
#    - get: terraforming-dps
    - task: terraform-apply-destroy
      image: concourse-terraform-image
      file: concourse-terraform/tasks/apply-plan.yaml
      input_mapping:
#        terraform-source-dir: terraforming-dps
#        aux-input-1: tfvars
        plan-output-archive: terraform-destroy-plan        
      params:
        DESTROY: true
#        TF_AUX_INPUT_PATH_1: aux-input-1
        <<: *tf_backend
#        <<: *tf_vars     
